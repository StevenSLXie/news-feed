// Prisma schema for NextAuth.js with PostgreSQL
// Docs: https://authjs.dev/reference/adapter/prisma#prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?     
  token_type         String?  
  scope              String?  
  id_token           String?  
  session_state      String?  
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  feeds         Feed[]
  articles      Article[]
  removedArticles RemovedArticle[]
}

model Feed {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  url       String
  title     String?
  createdAt DateTime @default(now())
  articles  Article[]
}

model Article {
  id          String   @id @default(cuid())
  feed        Feed     @relation(fields: [feedId], references: [id])
  feedId      String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  title       String
  link        String
  publishedAt DateTime?
  read        Boolean  @default(false)
  saved       Boolean  @default(false)
  @@unique([userId, link])
}

model RemovedArticle {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  link   String
  @@unique([userId, link])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires   DateTime

  @@unique([identifier, token])
}
